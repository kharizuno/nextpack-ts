import type { GetStaticProps, NextPage } from 'next'
import { withRouter } from 'next/router'

import { useEffect } from 'react'
import { connect, ConnectedProps } from 'react-redux';
import { bindActionCreators } from 'redux';

import { ApolloClient, ApolloProvider, InMemoryCache, gql } from '@apollo/client'
import * as actPost from '../src/redux/actions/post';

// import Home from '../src/components/home'

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

interface Props extends PropsFromRedux {
	router: any;
	animeList: any;
}

const HomePage: NextPage<Props> = (props: Props) => {
	console.log(props);

	useEffect(() => {
		if (props.animeList) {
			props.actPost.loadPost(props.animeList);
		}
	})

	return (
		<div className={styles.container}>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className={styles.main}>
				<h1 className={styles.title}>
					Welcome to <a href="https://nextjs.org">Next.js!</a>
				</h1>

				<p className={styles.description}>
					Get started by editing{' '}
					<code className={styles.code}>pages/index.js</code>
				</p>

				<div className={styles.grid}>
					<a href="https://nextjs.org/docs" className={styles.card}>
						<h2>Documentation &rarr;</h2>
						<p>Find in-depth information about Next.js features and API.</p>
					</a>

					<a href="https://nextjs.org/learn" className={styles.card}>
						<h2>Learn &rarr;</h2>
						<p>Learn about Next.js in an interactive course with quizzes!</p>
					</a>

					<a
						href="https://github.com/vercel/next.js/tree/canary/examples"
						className={styles.card}
					>
						<h2>Examples &rarr;</h2>
						<p>Discover and deploy boilerplate example Next.js projects.</p>
					</a>

					<a
						href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
						className={styles.card}
					>
						<h2>Deploy &rarr;</h2>
						<p>
							Instantly deploy your Next.js site to a public URL with Vercel.
						</p>
					</a>
				</div>
			</main>

			<footer className={styles.footer}>
				<a
					href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
					target="_blank"
					rel="noopener noreferrer"
				>
					Powered by{' '}
					<span className={styles.logo}>
						<Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
					</span>
				</a>
			</footer>
		</div>
	)
}

export const getStaticProps: GetStaticProps = async () => {
	const client = new ApolloClient({
		uri: 'https://graphql.anilist.co/',
		cache: new InMemoryCache
	});

	const data = await new Promise(resolve => {
		client.query({
			query: gql`
				query ($page: Int = 1, $id: Int, $type: MediaType, $format: [MediaFormat], $season: MediaSeason, $seasonYear: Int, $year: String, $genres: [String], $search: String, $onList: Boolean, $isAdult: Boolean = false, $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]) {
					Page(page: $page, perPage: 20) {
						pageInfo {
							total
							perPage
							currentPage
							lastPage
							hasNextPage
						}
						media(id: $id, type: $type, format_in: $format, season: $season, seasonYear: $seasonYear, startDate_like: $year, genre_in: $genres, search: $search, onList: $onList, isAdult: $isAdult, sort: $sort) {
							id
							title {
								userPreferred
							}
							coverImage {
								extraLarge
								large
								color
							}
							startDate {
								year
								month
								day
							}
							endDate {
								year
								month
								day
							}
							bannerImage
							season
							seasonYear
							description
							type
							format
							status(version: 2)
							episodes
							duration
							chapters
							volumes
							genres
							isAdult
							averageScore
							popularity
							nextAiringEpisode {
								airingAt
								timeUntilAiring
								episode
							}
							mediaListEntry {
								id
								status
							}
							studios(isMain: true) {
								edges {
									isMain
									node {
										id
										name
									}
								}
							}
						}
					}
				}		  
			`,
			variables: {
				page: 1,
				type: 'ANIME'
			}
		}).then((result) => resolve(result))
	});

	return {
		props: {
			animeList: data
		}
	}
}

const mapStateToProps = (state: any) => {
    return {}
}

const mapDispatchToProps = (dispatch: any) => {
    return {
		actPost: bindActionCreators(actPost, dispatch)
	}
}

const connector = connect(mapStateToProps, mapDispatchToProps);
type PropsFromRedux = ConnectedProps<typeof connector>;

export default connector(withRouter(HomePage));
